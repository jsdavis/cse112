{"version":3,"sources":["../js/main.js"],"names":["submitFoo","input","document","getElementById","value","output","foo","innerHTML","submitValidTime","inputTime","isValidTime","submitFormatTime","format","selectedFormat","options","selectedIndex","timeFormat","formatTime","timeString","flag","isEmpty","timeFormatRegex","match","string","replace","valuesArr","split","array","i","length","includes","parseInt","toString","hours","minutes","seconds","formatStyle","inputString","time","ampm","isAmPm","hour","module","exports"],"mappings":"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","file":"main.js","sourcesContent":["/* global foo */\n/* eslint no-unused-vars: [\"warn\"]*/\n\n/**\n * Grabs submission details from the submit foo HTML element\n * Calls Foo function with the input string.\n * @param {TYPE} None\n * @return {undefined} None\n */\nfunction submitFoo() {\n  /* get time input */\n  const input = document.getElementById('textID').value;\n\n  /* call foo with input */\n  const output = foo(input);\n  document.getElementById('foo_retval').innerHTML = output;\n}\n\n\n/**\n * Grabs submission details from the submit isValid HTML element\n * calls isValidTime with the time input String\n * @param {TYPE} None\n * @return {undefined} None\n */\nfunction submitValidTime() {\n  /* get time input */\n  const inputTime = document.getElementById('isValidTimeText').value;\n\n  /* call isValidTime with input */\n  const output = isValidTime(inputTime);\n  document.getElementById('valid_time_retval').innerHTML = output;\n}\n\n/**\n * Grabs submission details from the submit format HTML element\n * Calls formatTime with the time input string and selected format style\n * @param {TYPE} None\n * @return {undefined}\n */\nfunction submitFormatTime() {\n  /* get selected format stylw */\n  const format = document.getElementById('timeFormatSelector');\n  const selectedFormat = format.options[format.selectedIndex].value;\n  /* get time input */\n\n  const timeFormat = document.getElementById('timeFormatString').value;\n\n  /* call formatTime with inputs */\n  const output = formatTime(selectedFormat, timeFormat);\n  document.getElementById('formatTimeRetval').innerHTML = output;\n}\n\n\n/**\n * checks if time input string represents valid using regular expressions\n * @param {string} timeString time as stringinput by user.\n * @param {bool} flag flag to see if we want to return the time object or just\n * know if the time is valid\n * @return {bool} returns whether time is valid. If time is valid, and flag is\n * 1, returns JSON object for time.\n */\nfunction isValidTime(timeString, flag=0) {\n  /* error checking */\n  if(isEmpty(timeString)) {\n    return 'Empty Input';\n  }\n\n  /* Disabling eslint, regex longer than 80 characters */\n  /* eslint-disable */\n  let timeFormatRegex = /((^)|(\\ ))([0-1]?[0-9]|2[0-3])((\\ )?(AM|PM|am|pm)|(:[0-5][0-9]((\\ )?(AM|PM|am|pm)|(:[0-5][0-9]((\\ )?(AM|PM|am|pm)?))?)))$/;\n  /* eslint-enable */\n\n  /* get strings that match the regex, valid time formats */\n  const match = timeString.match(timeFormatRegex);\n\n  if(match) {\n    const string = match[0];      // full match string/\n    string.replace(/\\ /g, '');  // remove whitespaces.\n    const valuesArr = string.split(':');\n    const array = ['00', '00', '00']; // [hours, minutes, seconds]\n\n    /* check each value for am/pm input.*/\n    for(let i=0; i<valuesArr.length; i++) {\n      /* update values in result array */\n      if(valuesArr[i].includes(' ')) {\n        valuesArr[i] = valuesArr[i].replace(/\\ /g, ''); // clean up match\n      }\n\n      array[i] = valuesArr[i];\n\n      if(valuesArr[i].includes('am')||valuesArr[i].includes('AM')) {\n        valuesArr[i] = valuesArr[i].replace(/am/g, ''); // clean up match\n        valuesArr[i] = valuesArr[i].replace(/AM/g, '');\n        array[i] = valuesArr[i];// update\n\n        /* 0 am invalid time. */\n        if(parseInt(valuesArr[0])==0) {\n          return false;\n        } else if(parseInt(valuesArr[0])==12) {\n          /* 12am --> 00:00 */\n          array[0] = 0;\n        } else{\n          array[0] = valuesArr[0];\n        }\n      } else if(valuesArr[i].includes('pm')||valuesArr[i].includes('PM')) {\n        valuesArr[i] = valuesArr[i].replace(/pm/g, ''); // clean up match\n        valuesArr[i] = valuesArr[i].replace(/PM/g, '');\n\n        array[i] = valuesArr[i];// update\n\n        /* 0pm --> invalid time. */\n        if(parseInt(valuesArr[0])==0) {\n          return false;\n        } else if(parseInt(valuesArr[0])<12) {\n          /* 3:15pm --> 15:15 */\n          array[0] = (parseInt(valuesArr[0])+12).toString();\n        } else if(parseInt(valuesArr[0]) == 12) {\n          /* 12:34 pm --> 12:34*/\n          array[0] = valuesArr[0];\n        } else {\n          return false;\n        }\n      }\n\n      /* add padding for single digit minutes and seconds */\n      if(i>0 && array[i].length == 1) {\n        array[i] = '0'+array[i];\n      }\n    }\n\n    /* if flag is true, we want to return the time object. */\n    if(flag) {\n      return {hours: array[0], minutes: array[1], seconds: array[2]};\n    }\n\n    return true;\n  }\n  /* did not find match --> not a valid time. */\n  return false;\n}\n\n\n/**\n * formats the time from input string to the specifed choice.\n * @param {string} formatStyle user's choice of formatting.\n * @param {string} inputString time as string input by user.\n * @return {string} time string formatted as per choice, or\n * \"Time is Invalid\".\n */\nfunction formatTime(formatStyle, inputString) {\n  /* check if input time is valid  */\n  const time = isValidTime(inputString, 1 );\n\n  let ampm;\n  /* if so, format it accordingly */\n  if(time) {\n    switch(formatStyle) {\n    case '1': /* HH */\n      return time.hours;\n    case '2': /* HH am/pm */\n      ampm = isAmPm(time.hours);\n      return ampm.hour+' '+ampm.ampm;\n    case '3': /* HH:MM */\n      return time.hours+':'+time.minutes;\n    case '4': /* HH:MM am/pm */\n      ampm = isAmPm(time.hours);\n      return ampm.hour+':'+time.minutes+' '+ampm.ampm;\n    case '5': /* HH:MM:SS */\n      return time.hours+':'+time.minutes+':'+time.seconds;\n    case '6': /* HH:MM:SS am/pm */\n      ampm = isAmPm(time.hours);\n      return ampm.hour+':'+time.minutes+':'+time.seconds+' '+ampm.ampm;\n    }\n  } else {\n    return 'Time is Invalid';\n  }\n}\n\n\n/**\n * helper function which takes in an hour (base 24 hour) as a string\n * and returns object containing the hour in base 12 and the am or pm tag.\n * @param {string} hour hour in base 24.\n * @return {object} JSON object containing the hour base 12 and am or pm\n * labels.\n */\nfunction isAmPm(hour) {\n  /* if hour < 12, it s the morning --> am tag. */\n  if(parseInt(hour) >= 0 && parseInt(hour) < 12) {\n    /* 0 am --> 12am */\n    if(parseInt(hour) == 0) {\n      return {hour: '12', ampm: 'am'};\n    } else {\n      return {hour: hour, ampm: 'am'};\n    }\n  } else {\n    /* 13:00 --> 1pm */\n    return {hour: (parseInt(hour)-12).toString(), ampm: 'pm'};\n  }\n}\n\n/**\n * Checks whether string is empty\n * @param {string} string input string for which we want to check if empty\n * @return {boolean} true if the input string is empty, otherwise false.\n */\nfunction isEmpty(string) {\n  if(string == '') {\n    return true;\n  }\n  return false;\n}\n\n\nmodule.exports.isValidTime = isValidTime;\nmodule.exports.formatTime = formatTime;\n\n"]}